#include <iostream>
#include <vector>
#include <chrono> // 用于计时
#include <algorithm> // 用于随机数生成

using namespace std;

// 定义排序算法函数
void bubbleSort(vector<int>& nums) {
    int n = nums.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (nums[j] > nums[j + 1]) {
                swap(nums[j], nums[j + 1]);
            }
        }
    }
}

void insertionSort(vector<int>& nums) {
    int n = nums.size();
    for (int i = 1; i < n; i++) {
        int key = nums[i];
        int j = i - 1;
        while (j >= 0 && nums[j] > key) {
            nums[j + 1] = nums[j];
            j--;
        }
        nums[j + 1] = key;
    }
}

void selectionSort(vector<int>& nums) {
    int n = nums.size();
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (nums[j] < nums[minIndex]) {
                minIndex = j;
            }
        }
        swap(nums[i], nums[minIndex]);
    }
}

void merge(vector<int>& nums, int left, int mid, int right) {
    vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;
    while (i <= mid && j <= right) {
        if (nums[i] <= nums[j]) {
            temp[k++] = nums[i++];
        }
        else {
            temp[k++] = nums[j++];
        }
    }
    while (i <= mid) {
        temp[k++] = nums[i++];
    }
    while (j <= right) {
        temp[k++] = nums[j++];
    }
    for (int p = 0; p < k; p++) {
        nums[left + p] = temp[p];
    }
}

void mergeSort(vector<int>& nums, int left, int right) {
    if (left >= right) {
        return;
    }
    int mid = (left + right) / 2;
    mergeSort(nums, left, mid);
    mergeSort(nums, mid + 1, right);
    merge(nums, left, mid, right);
}

int partition(vector<int>& nums, int left, int right) {
    int pivot = nums[right];
    int i = left - 1;
    for (int j = left; j < right; j++) {
        if (nums[j] < pivot) {
            i++;
            swap(nums[i], nums[j]);
        }
    }
    swap(nums[i + 1], nums[right]);
    return i + 1;
}

void quickSort(vector<int>& nums, int left, int right) {
    if (left >= right) {
        return;
    }
    int pivotIndex = partition(nums, left, right);
    quickSort(nums, left, pivotIndex - 1);
    quickSort(nums, pivotIndex + 1, right);
}

int main() {
    // 生成顺序序列
    vector<int> nums1(10000);
    for (int i = 0; i < 10000; i++) {
        nums1[i] = i;
    }

    // 生成逆序序列
    vector<int> nums2(10000);
    for (int i = 0; i < 10000; i++) {
        nums2[i] = 10000 - i;
    }

    // 生成随机序列
    vector<int> nums3(10000);
    for (int i = 0; i < 10000; i++) {
        nums3[i] = rand();
    }

    // 测试起泡排序
    auto start = chrono::steady_clock::now();
    bubbleSort(nums1);
    auto end = chrono::steady_clock::now();
    cout << "起泡排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    bubbleSort(nums2);
    end = chrono::steady_clock::now();
    cout << "起泡排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    bubbleSort(nums3);
    end = chrono::steady_clock::now();
    cout << "起泡排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    // 测试插入排序
    start = chrono::steady_clock::now();
    insertionSort(nums1);
    end = chrono::steady_clock::now();
    cout << "插入排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    insertionSort(nums2);
    end = chrono::steady_clock::now();
    cout << "插入排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    insertionSort(nums3);
    end = chrono::steady_clock::now();
    cout << "插入排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    // 测试选择排序
    start = chrono::steady_clock::now();
    selectionSort(nums1);
    end = chrono::steady_clock::now();
    cout << "选择排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    selectionSort(nums2);
    end = chrono::steady_clock::now();
    cout << "选择排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    selectionSort(nums3);
    end = chrono::steady_clock::now();
    cout << "选择排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    // 测试归并排序
    start = chrono::steady_clock::now();
    mergeSort(nums1, 0, nums1.size() - 1);
    end = chrono::steady_clock::now();
    cout << "归并排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    mergeSort(nums2, 0, nums2.size() - 1);
    end = chrono::steady_clock::now();
    cout << "归并排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    mergeSort(nums3, 0, nums3.size() - 1);
    end = chrono::steady_clock::now();
    cout << "归并排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    // 测试快速排序
    start = chrono::steady_clock::now();
    quickSort(nums1, 0, nums1.size() - 1);
    end = chrono::steady_clock::now();
    cout << "快速排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    quickSort(nums2, 0, nums2.size() - 1);
    end = chrono::steady_clock::now();
    cout << "快速排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    start = chrono::steady_clock::now();
    quickSort(nums3, 0, nums3.size() - 1);
    end = chrono::steady_clock::now();
    cout << "快速排序时间为：" << chrono::duration_cast<chrono::microseconds>(end - start).count() << "微秒" << endl;

    return 0;
}
